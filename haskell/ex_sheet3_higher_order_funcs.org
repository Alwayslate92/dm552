#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Exercises Higher order functions
#+DATE: <2019-02-05 Tue>
#+AUTHOR: Bamse
#+EMAIL: jonan15@student.sdu.dk
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.14)

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

This exercise sheet is all about higher order functions (functions that take functions as a parameter), the most important ones that you will get to understand are ~map, filter, foldl, foldr~.

* It begins
~map~ is often used in conjunction with a function that makes some transformation on an element. Use ~map~ to solve the following exercises, possibly using a helper function.

- Get a list of square roots, from a list of numbers.
- Get a list of lengths, from a list of strings.
- Add your favorite number to a list of numbers.
- Double the numbers in a list unless they exceed some threshold.
- Given a list, make a list of lists (each element is its own list).
- Using ~fizzbuzz~ from the second exercise sheet (if you made it), make a list of the first few (e.g. 20) "numbers" in FizzBuzz.

Remember that ~filter~ keeps the elements that match the predicate, rather than exclude them. Use ~filter~ to solve the following exercises.

- Get a list of numbers below some threshold, from a list of numbers.
- Come up with your own function that returns a bool and use it with ~filter~.
- Recreate quicksort.

Use ~foldl~ or ~foldr~ to solve the following exercises.

- Make your own ~sum~ function.
- Make your own ~maximum~ function, you may use ~max~.
- Make your own ~reverse~ function. Hint: use ~flip~.

